// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosClient.Specs.ComsosClientExtensionsFeature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IterationExtensionsFeature")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupCosmosDbContainer")]
    [NUnit.Framework.CategoryAttribute("withUniqueFeatureContainerInSharedDatabase")]
    public partial class IterationExtensionsFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IterationExtensionsFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IterationExtensionsFeature", "\tIn order to operatore over the results of a query\r\n\tAs a developer\r\n\tI want to b" +
                    "e able to iterate the results of a query", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupCosmosDbContainer",
                        "withUniqueFeatureContainerInSharedDatabase"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Iterate a collection with a synchronous action.")]
        public virtual void IterateACollectionWithASynchronousAction_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Iterate a collection with a synchronous action.", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Index",
                        "Id",
                        "Name",
                        "DateOfBirth"});
            table1.AddRow(new string[] {
                        "1",
                        "22359BAE-D1A7-407F-B560-4FC62027C68E",
                        "Tom",
                        "1972-01-13"});
            table1.AddRow(new string[] {
                        "2",
                        "36DBCA33-C10B-4802-A9AA-AB16822A9D25",
                        "Dick",
                        "1984-05-17"});
            table1.AddRow(new string[] {
                        "3",
                        "5BD6C25C-4846-4352-B069-CD75BCA7E41C",
                        "Harry",
                        "1991-10-06"});
            table1.AddRow(new string[] {
                        "4",
                        "6ED54E7C-D39C-4A2D-8781-91D15EC047F1",
                        "Darrell",
                        "1933-08-14"});
            table1.AddRow(new string[] {
                        "5",
                        "EB7DF71C-762E-49D9-BC32-95C608EDE208",
                        "Sally",
                        "1932-04-09"});
            table1.AddRow(new string[] {
                        "6",
                        "DC62035F-039D-40EE-8307-BD77CE6FEC67",
                        "Alicia",
                        "1933-06-12"});
#line 10
 testRunner.And("I add a collection of Person objects called \"People\" to the Cosmos Container", ((string)(null)), table1, "And ");
#line 18
 testRunner.When("I iterate the query \"SELECT * FROM People p WHERE p.dateOfBirth.dateTimeOffset < " +
                    "\'1934-01-01T00:00:00.000000Z\'\" with a synchronous action and store the Person ob" +
                    "jects seen in \"PersonItemsSeen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Index"});
            table2.AddRow(new string[] {
                        "4"});
            table2.AddRow(new string[] {
                        "5"});
            table2.AddRow(new string[] {
                        "6"});
#line 19
 testRunner.Then("the Person collection \"PersonItemsSeen\" should contain the following items from t" +
                    "he Person collection \"People\"", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
