// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosDb.Sql.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add a graph vertex")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupGraphRepository")]
    public partial class AddAGraphVertexFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddAGraphVertex.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add a graph vertex", "\tIn order to execute graph queries\r\n\tAs a developer\r\n\tI want to be able to add a " +
                    "vertex with properties to a client", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupGraphRepository"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a vertex to the graph")]
        public virtual void AddAVertexToTheGraph()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a vertex to the graph", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table1.AddRow(new string[] {
                        "0a836426-3f98-47c7-9887-7b2af1055e8e",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 10
 testRunner.When("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table2.AddRow(new string[] {
                        "0a836426-3f98-47c7-9887-7b2af1055e8e",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 13
 testRunner.Then("I should be able to get the following vertices", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a vertex to the graph that already exists")]
        public virtual void AddAVertexToTheGraphThatAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a vertex to the graph that already exists", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table3.AddRow(new string[] {
                        "978a4987-f28d-42d5-a2dc-b2f00e9dd841",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 18
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table4.AddRow(new string[] {
                        "978a4987-f28d-42d5-a2dc-b2f00e9dd841",
                        "Marty",
                        "Feldman",
                        "1934/07/08"});
#line 21
 testRunner.When("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table4, "When ");
#line 24
 testRunner.Then("it should throw an \'Corvus.Extensions.CosmosDb.GremlinClientException, Corvus.Ext" +
                    "ensions.CosmosDb.Gremlin.Abstractions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("the GremlinClientException should have an HTTP status code of \'Conflict\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a vertex that already exists")]
        public virtual void UpdateAVertexThatAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a vertex that already exists", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table5.AddRow(new string[] {
                        "4457f710-19ad-486b-9bda-e2ff6cda3a27",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 28
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table6.AddRow(new string[] {
                        "4457f710-19ad-486b-9bda-e2ff6cda3a27",
                        "Marty",
                        "Feldman",
                        "1934/07/08"});
#line 31
 testRunner.When("I update the following vertices in the graph", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table7.AddRow(new string[] {
                        "4457f710-19ad-486b-9bda-e2ff6cda3a27",
                        "Marty",
                        "Feldman",
                        "1934/07/08"});
#line 34
 testRunner.Then("I should be able to get the following vertices", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a vertex that doesn\'t exist")]
        public virtual void UpdateAVertexThatDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a vertex that doesn\'t exist", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table8.AddRow(new string[] {
                        "cdc3b049-f194-4470-902f-ced00f26549f",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 39
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table9.AddRow(new string[] {
                        "2b9fa76b-0db5-4c20-9579-48141dcb9e26",
                        "Marty",
                        "Feldman",
                        "1934/07/08"});
#line 42
 testRunner.When("I update the following vertices in the graph", ((string)(null)), table9, "When ");
#line 45
 testRunner.Then("it should throw an \'Corvus.Extensions.CosmosDb.GremlinClientException, Corvus.Ext" +
                    "ensions.CosmosDb.Gremlin.Abstractions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.And("the GremlinClientException should have an HTTP status code of \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table10.AddRow(new string[] {
                        "cdc3b049-f194-4470-902f-ced00f26549f",
                        "Barry",
                        "Took",
                        "1928/06/19"});
#line 47
 testRunner.And("I should be able to get the following vertices", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
