// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosDb.Sql.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add a graph edge")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupGraphRepository")]
    public partial class AddAGraphEdgeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddEdge.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add a graph edge", "\tIn order to execute graph queries\r\n\tAs a developer\r\n\tI want to be able to add ed" +
                    "ges with properties to a client", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupGraphRepository"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an edge between two vertices")]
        public virtual void AddAnEdgeBetweenTwoVertices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an edge between two vertices", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth"});
            table11.AddRow(new string[] {
                        "050691a1-f9cf-44ca-b2e1-f2f436fc82b1",
                        "Barry",
                        "Took",
                        "1928/06/19"});
            table11.AddRow(new string[] {
                        "3e3085d5-62ab-48e8-878b-d0da77e70dc9",
                        "Marty",
                        "Feldman",
                        "1934/07/08"});
#line 10
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start Id",
                        "End Id",
                        "Id",
                        "Label"});
            table12.AddRow(new string[] {
                        "050691a1-f9cf-44ca-b2e1-f2f436fc82b1",
                        "3e3085d5-62ab-48e8-878b-d0da77e70dc9",
                        "abbb71e0-109d-445e-81b2-bc373882fd41",
                        "works with"});
#line 14
 testRunner.When("I add the following edge to the graph", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start Id",
                        "End Id",
                        "Id",
                        "Label"});
            table13.AddRow(new string[] {
                        "050691a1-f9cf-44ca-b2e1-f2f436fc82b1",
                        "3e3085d5-62ab-48e8-878b-d0da77e70dc9",
                        "abbb71e0-109d-445e-81b2-bc373882fd41",
                        "works with"});
#line 17
 testRunner.Then("the following out traversals should exist", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Start Id",
                        "End Id",
                        "Id",
                        "Label"});
            table14.AddRow(new string[] {
                        "3e3085d5-62ab-48e8-878b-d0da77e70dc9",
                        "050691a1-f9cf-44ca-b2e1-f2f436fc82b1",
                        "abbb71e0-109d-445e-81b2-bc373882fd41",
                        "works with"});
#line 20
 testRunner.And("the following in traversals should exist", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
