// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosDb.Sql.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Folding results")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupGraphRepository")]
    public partial class FoldingResultsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Fold.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Folding results", "\tIn order to execute graph queries\r\n\tAs a developer\r\n\tI want to be able to fold t" +
                    "he results of the traversal", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupGraphRepository"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fold a traversal to a list")]
        public virtual void FoldATraversalToAList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fold a traversal to a list", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table16.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table16.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 10
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table16, "Given ");
#line 14
 testRunner.And("I get the nodes with label \'Person\' as a traversal called \'traversal1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I fold the traversal called \'traversal1\' to a list traversal called \'traversal2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I execute the list traversal called \'traversal2\' and store the result in a list c" +
                    "alled \'list1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table17.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table17.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 17
 testRunner.Then("I should be able to get the following vertices from the list called \'list1\'", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fold a traversal to a list with no results")]
        public virtual void FoldATraversalToAListWithNoResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fold a traversal to a list with no results", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table18.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table18.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 23
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table18, "Given ");
#line 27
 testRunner.And("I get the nodes with label \'Cow\' as a traversal called \'traversal1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("I fold the traversal called \'traversal1\' to a list traversal called \'traversal2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("I execute the list traversal called \'traversal2\' and store the result in a list c" +
                    "alled \'list1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the list called \'list1\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
