// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosDb.Sql.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Filter by Has")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupGraphRepository")]
    public partial class FilterByHasFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Has.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Filter by Has", "\tIn order to execute graph queries\r\n\tAs a developer\r\n\tI want to be able to fold t" +
                    "he results of the traversal", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupGraphRepository"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter to a label")]
        public virtual void FilterToALabel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter to a label", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table25.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table25.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 10
 testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table25, "Given ");
#line 14
 testRunner.When("I get the nodes with label \'Person\' as a traversal called \'traversal1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table26.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table26.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 15
 testRunner.Then("I should be able to get the following vertices from the traversal called \'travers" +
                    "al1\'", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter to a property which exists")]
        public virtual void FilterToAPropertyWhichExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter to a property which exists", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table27.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table27.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 21
testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table27, "Given ");
#line 25
 testRunner.When("I get the nodes with property \'firstName\' as a traversal called \'traversal1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table28.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table28.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 26
 testRunner.Then("I should be able to get the following vertices from the traversal called \'travers" +
                    "al1\'", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter to a property which does not exist")]
        public virtual void FilterToAPropertyWhichDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter to a property which does not exist", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table29.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table29.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 32
testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table29, "Given ");
#line 36
 testRunner.When("I get the nodes with property \'nonExistent\' as a traversal called \'traversal1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the traversal called \'traversal1\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter to a property with a predicate")]
        public virtual void FilterToAPropertyWithAPredicate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter to a property with a predicate", null, ((string[])(null)));
#line 39
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table30.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table30.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 40
testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table30, "Given ");
#line 44
 testRunner.When("I get the nodes with property \'rating\' as a traversal called \'traversal1\' with th" +
                    "e predicate between(6,7)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table31.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 45
 testRunner.Then("I should be able to get the following vertices from the traversal called \'travers" +
                    "al1\'", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter to a property with a predicate which produces no results")]
        public virtual void FilterToAPropertyWithAPredicateWhichProducesNoResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter to a property with a predicate which produces no results", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "First name",
                        "Last name",
                        "DateOfBirth",
                        "Rating"});
            table32.AddRow(new string[] {
                        "02df3455-be17-4975-b7e5-1cc3229e14d5",
                        "Barry",
                        "Took",
                        "1928/06/19",
                        "5"});
            table32.AddRow(new string[] {
                        "785e3630-1c14-490a-b4c2-948de1d7190b",
                        "Marty",
                        "Feldman",
                        "1934/07/08",
                        "6"});
#line 50
testRunner.Given("I add the following vertices to the graph with label \'Person\'", ((string)(null)), table32, "Given ");
#line 54
 testRunner.When("I get the nodes with property \'rating\' as a traversal called \'traversal1\' with th" +
                    "e predicate inside(6,8)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the traversal called \'traversal1\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
