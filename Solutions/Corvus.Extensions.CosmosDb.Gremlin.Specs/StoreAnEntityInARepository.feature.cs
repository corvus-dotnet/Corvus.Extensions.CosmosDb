// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.CosmosDb.Sql.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Store an entity in a client")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupGraphRepository")]
    public partial class StoreAnEntityInAClientFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StoreAnEntityInARepository.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Store an entity in a client", "\tIn order to persist POCO entities\r\n\tAs a developer\r\n\tI want to be able to store " +
                    "an entity in a client", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupGraphRepository"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Store a null entity")]
        public virtual void StoreANullEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store a null entity", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
 testRunner.When("I store a null entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("it should throw a \'System.ArgumentNullException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("the ArgumentNullException applies to the parameter \'item\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Store an entity")]
        public virtual void StoreAnEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store an entity", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table33.AddRow(new string[] {
                        "newguid",
                        "Hello",
                        "7"});
#line 15
 testRunner.When("I store an entity", ((string)(null)), table33, "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table34.AddRow(new string[] {
                        "newguid",
                        "Hello",
                        "7"});
#line 18
 testRunner.Then("the result should match", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert an entity that does not exist")]
        public virtual void InsertAnEntityThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert an entity that does not exist", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table35.AddRow(new string[] {
                        "3976796e-9ff5-4ee9-aeea-ac2dceb96af6",
                        "Hello",
                        "7"});
#line 23
 testRunner.When("I insert an entity", ((string)(null)), table35, "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table36.AddRow(new string[] {
                        "3976796e-9ff5-4ee9-aeea-ac2dceb96af6",
                        "Hello",
                        "7"});
#line 26
 testRunner.Then("the result should match", ((string)(null)), table36, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert an entity that already exists")]
        public virtual void InsertAnEntityThatAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert an entity that already exists", null, ((string[])(null)));
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table37.AddRow(new string[] {
                        "7f3a63ad-0756-4376-9515-33ab4c3d92fc",
                        "Hello",
                        "7"});
#line 31
 testRunner.Given("I insert an entity", ((string)(null)), table37, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table38.AddRow(new string[] {
                        "7f3a63ad-0756-4376-9515-33ab4c3d92fc",
                        "World",
                        "8"});
#line 34
 testRunner.When("I insert an entity", ((string)(null)), table38, "When ");
#line 37
 testRunner.Then("it should throw a \'Microsoft.Azure.Documents.DocumentClientException, Microsoft.A" +
                    "zure.DocumentDB.Core\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("the DocumentClientException should have an HTTP status code of \'Conflict\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an entity using the update method")]
        public virtual void UpdateAnEntityUsingTheUpdateMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an entity using the update method", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table39.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "First",
                        "1"});
#line 41
 testRunner.Given("I store an entity", ((string)(null)), table39, "Given ");
#line 44
 testRunner.And("I save the ETag as \'FirstVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table40.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Second",
                        "2"});
#line 45
 testRunner.And("I store an entity", ((string)(null)), table40, "And ");
#line 48
 testRunner.And("I save the ETag as \'SecondVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table41.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Third",
                        "3"});
#line 49
 testRunner.When("I update an entity with the ETag \'SecondVersion\'", ((string)(null)), table41, "When ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table42.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Third",
                        "3"});
#line 52
 testRunner.Then("the result should match", ((string)(null)), table42, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an entity with the wrong etag using the update method")]
        public virtual void UpdateAnEntityWithTheWrongEtagUsingTheUpdateMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an entity with the wrong etag using the update method", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table43.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "First",
                        "1"});
#line 57
 testRunner.Given("I store an entity", ((string)(null)), table43, "Given ");
#line 60
 testRunner.And("I save the ETag as \'FirstVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table44.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "Second",
                        "2"});
#line 61
 testRunner.And("I store an entity", ((string)(null)), table44, "And ");
#line 64
 testRunner.And("I save the ETag as \'SecondVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table45.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "Third",
                        "3"});
#line 65
 testRunner.When("I update an entity with the ETag \'FirstVersion\'", ((string)(null)), table45, "When ");
#line 68
 testRunner.Then("it should throw a \'Microsoft.Azure.Documents.DocumentClientException, Microsoft.A" +
                    "zure.DocumentDB.Core\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.And("the DocumentClientException should have an HTTP status code of \'PreconditionFaile" +
                    "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an entity with the correct etag")]
        public virtual void UpdateAnEntityWithTheCorrectEtag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an entity with the correct etag", null, ((string[])(null)));
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table46.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "First",
                        "1"});
#line 72
 testRunner.Given("I store an entity", ((string)(null)), table46, "Given ");
#line 75
 testRunner.And("I save the ETag as \'FirstVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table47.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Second",
                        "2"});
#line 76
 testRunner.And("I store an entity", ((string)(null)), table47, "And ");
#line 79
 testRunner.And("I save the ETag as \'SecondVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table48.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Third",
                        "3"});
#line 80
 testRunner.When("I store an entity with the ETag \'SecondVersion\'", ((string)(null)), table48, "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table49.AddRow(new string[] {
                        "1f504446-e049-42dc-b005-99fbd77e79b7",
                        "Third",
                        "3"});
#line 83
 testRunner.Then("the result should match", ((string)(null)), table49, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an entity with the wrong etag")]
        public virtual void UpdateAnEntityWithTheWrongEtag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an entity with the wrong etag", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table50.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "First",
                        "1"});
#line 88
 testRunner.Given("I store an entity", ((string)(null)), table50, "Given ");
#line 91
 testRunner.And("I save the ETag as \'FirstVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table51.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "Second",
                        "2"});
#line 92
 testRunner.And("I store an entity", ((string)(null)), table51, "And ");
#line 95
 testRunner.And("I save the ETag as \'SecondVersion\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Some value"});
            table52.AddRow(new string[] {
                        "be7883da-62ed-4680-bf49-195ba532bf98",
                        "Third",
                        "3"});
#line 96
 testRunner.When("I store an entity with the ETag \'FirstVersion\'", ((string)(null)), table52, "When ");
#line 99
 testRunner.Then("it should throw a \'Microsoft.Azure.Documents.DocumentClientException, Microsoft.A" +
                    "zure.DocumentDB.Core\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("the DocumentClientException should have an HTTP status code of \'PreconditionFaile" +
                    "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
