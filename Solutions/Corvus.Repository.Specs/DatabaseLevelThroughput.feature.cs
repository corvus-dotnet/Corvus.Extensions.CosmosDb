// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Repository.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Configure database level throughput")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    [NUnit.Framework.CategoryAttribute("setupCosmosDBKeys")]
    public partial class ConfigureDatabaseLevelThroughputFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DatabaseLevelThroughput.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Configure database level throughput", "\tIn order to maximize the cost efficiency of my repositories\r\n\tAs a developer\r\n\tI" +
                    " want to be able to configure database level throughput", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer",
                        "setupCosmosDBKeys"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create repositories with database level throughput")]
        public virtual void CreateRepositoriesWithDatabaseLevelThroughput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create repositories with database level throughput", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
 testRunner.When("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("I create a repository (\"SharedThroughPutDb\", \"Collection2\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection name",
                        "Throughput"});
            table1.AddRow(new string[] {
                        "Collection1",
                        "NotSpecified"});
            table1.AddRow(new string[] {
                        "Collection2",
                        "NotSpecified"});
#line 12
 testRunner.Then("it should create a database called \"SharedThroughPutDb\" with the following collec" +
                    "tions", ((string)(null)), table1, "Then ");
#line 16
 testRunner.And("the database called \"SharedThroughPutDb\" should have the throughput 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create repositories and increase the database level throughput")]
        public virtual void CreateRepositoriesAndIncreaseTheDatabaseLevelThroughput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create repositories and increase the database level throughput", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
 testRunner.When("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.And("I create a repository (\"SharedThroughPutDb\", \"Collection2\") with database through" +
                    "put 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection name",
                        "Throughput"});
            table2.AddRow(new string[] {
                        "Collection1",
                        "NotSpecified"});
            table2.AddRow(new string[] {
                        "Collection2",
                        "NotSpecified"});
#line 21
 testRunner.Then("it should create a database called \"SharedThroughPutDb\" with the following collec" +
                    "tions", ((string)(null)), table2, "Then ");
#line 25
 testRunner.And("the database called \"SharedThroughPutDb\" should have the throughput 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create repositories and decrease the database level throughput")]
        public virtual void CreateRepositoriesAndDecreaseTheDatabaseLevelThroughput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create repositories and decrease the database level throughput", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
 testRunner.When("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I create a repository (\"SharedThroughPutDb\", \"Collection2\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection name",
                        "Throughput"});
            table3.AddRow(new string[] {
                        "Collection1",
                        "NotSpecified"});
            table3.AddRow(new string[] {
                        "Collection2",
                        "NotSpecified"});
#line 30
 testRunner.Then("it should create a database called \"SharedThroughPutDb\" with the following collec" +
                    "tions", ((string)(null)), table3, "Then ");
#line 34
 testRunner.And("the database called \"SharedThroughPutDb\" should have the throughput 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a repository with custom throughput in a database with shared throughput")]
        public virtual void CreateARepositoryWithCustomThroughputInADatabaseWithSharedThroughput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a repository with custom throughput in a database with shared throughput", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 37
 testRunner.When("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.And("I create a repository (\"SharedThroughPutDb\", \"Collection2\") with collection throu" +
                    "ghput 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Collection name",
                        "Throughput"});
            table4.AddRow(new string[] {
                        "Collection1",
                        "NotSpecified"});
            table4.AddRow(new string[] {
                        "Collection2",
                        "800"});
#line 39
 testRunner.Then("it should create a database called \"SharedThroughPutDb\" with the following collec" +
                    "tions", ((string)(null)), table4, "Then ");
#line 43
 testRunner.And("the database called \"SharedThroughPutDb\" should have the throughput 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a repository with database throughput in a database without shared through" +
            "put")]
        public virtual void CreateARepositoryWithDatabaseThroughputInADatabaseWithoutSharedThroughput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a repository with database throughput in a database without shared through" +
                    "put", null, ((string[])(null)));
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 46
 testRunner.When("I create a repository (\"NotSharedThroughPutDb\", \"Collection1\") with collection th" +
                    "roughput 800 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("I create a repository (\"NotSharedThroughPutDb\", \"Collection2\") with database thro" +
                    "ughput 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.Then("it should throw a \'System.InvalidOperationException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the database offer throughput to a valid value")]
        public virtual void SetTheDatabaseOfferThroughputToAValidValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set the database offer throughput to a valid value", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 51
 testRunner.Given("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("I set the database offer throughput for the repository (\"SharedThroughPutDb\", \"Co" +
                    "llection1\") to 1000 ru/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the database called \"SharedThroughPutDb\" should have the throughput 1000 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the offer throughput to a value which too low")]
        public virtual void SetTheOfferThroughputToAValueWhichTooLow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set the offer throughput to a value which too low", null, ((string[])(null)));
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 56
 testRunner.Given("I create a repository (\"SharedThroughPutDb\", \"Collection1\") with database through" +
                    "put 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I set the database offer throughput for the repository (\"SharedThroughPutDb\", \"Co" +
                    "llection1\") to 100 ru/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("it should throw a \'Microsoft.Azure.Documents.DocumentClientException, Microsoft.A" +
                    "zure.DocumentDB.Core\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("the database called \"SharedThroughPutDb\" should have the throughput 400 RU/s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
